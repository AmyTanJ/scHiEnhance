{
 "cells": [],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "source": [
     "import argparse\n",
     "import os\n",
     "import torch\n",
     "import torch.nn as nn\n",
     "import numpy as np\n",
     "import h5py\n",
     "import hicstraw\n",
     "from tqdm import tqdm\n",
     "\n",
     "def carn_divider(hic, cell_num, chr_num, gi, chunk=200, stride=200, bound=201, padding=True):\n",
     "    divide(hic, cell_num, chr_num, gi, chunk, stride, bound, padding)\n",
     "\n",
     "def divide(mat, cell_num, chr_num, gi, chunk_size=200, stride=200, bound=201, padding=True, verbose=False):\n",
     "    \"\"\"\n",
     "    Dividing method.\n",
     "    \"\"\"\n",
     "    result = []\n",
     "    size = mat.shape[0]\n",
     "    if (stride < chunk_size and padding):\n",
     "        pad_len = (chunk_size - stride) // 2\n",
     "        mat = np.pad(mat, ((pad_len, pad_len), (pad_len, pad_len)), 'constant')\n",
     "    # mat's shape changed, update!\n",
     "    height, width = mat.shape\n",
     "    assert height == width, 'Now, we just assumed matrix is squared!'\n",
     "    for i in range(0, height, stride):\n",
     "        for j in range(0, width, stride):\n",
     "            if abs(i - j) <= bound and i + chunk_size < height and j + chunk_size < width and i>=j:\n",
     "                subImage = mat[i:i + chunk_size, j:j + chunk_size]\n",
     "                subImage = subImage.astype(np.float32)\n",
     "                subImage=torch.from_numpy(subImage)\n",
     "                subImage = subImage.reshape(200*200)\n",
     "                sample = gi.create_group('{0}_{1}'.format(i, j))\n",
     "                sample.create_dataset('img', data = subImage, compression=\"gzip\")\n",
     "                strList = [cell_num, chr_num, size, i, j]\n",
     "                asciiList = [repr(n).encode(\"ascii\", \"ignore\") for n in strList]\n",
     "                sample.create_dataset('label', data = asciiList)\n",
     "    if verbose: print(\n",
     "        f'[Chr{chr_str}] Deviding HiC matrix ({size}x{size}) into {len(result)} samples with chunk={chunk_size}, '\n",
     "        f'stride={stride}, bound={bound}')\n",
     "\n",
     "def res_change(length, res):\n",
     "    \"\"\"\n",
     "    Change resolution of single cell .hic file.\n",
     "    \"\"\"\n",
     "    if length % res == 0:\n",
     "        return length // res\n",
     "    else:\n",
     "        return length // res + 1\n",
     "\n",
     "def processor(args):\n",
     "    \"\"\"\n",
     "    Divde scHi-C contact map into square patches.\n",
     "    \"\"\"\n",
     "    path = args.indir\n",
     "    save_path = args.outdir + '/h5_hic_dataset.hdf5'\n",
     "    resolution = args.resolution\n",
     "    cell_list = []\n",
     "    for filename in os.listdir(path):\n",
     "        cell_list.append(filename)\n",
     "    cell_path_list = [path + '/' +  i for i in cell_list]\n",
     "    H5File = h5py.File(save_path, 'a')\n",
     "    for j in tqdm(range(len(cell_path_list))):\n",
     "        hic = hicstraw.HiCFile(cell_path_list[j])\n",
     "        filename = f'{(cell_path_list[j].split(\"/\")[-1]).split(\".\")[0]}'\n",
     "        cell_identity = H5File.create_group(filename)\n",
     "        for ind, ch in enumerate(args.chr_list):\n",
     "            for i in range(len(hic.getChromosomes())):\n",
     "                if ch == hic.getChromosomes()[i].name:\n",
     "                    size = res_change(hic.getChromosomes()[i].length, resolution)\n",
     "            gen = hicstraw.straw('observed', 'NONE', cell_path_list[j], ch,ch,'BP', resolution)\n",
     "            A = np.zeros((size, size))\n",
     "            for i in range(len(gen)):\n",
     "                p1 = gen[i].binX // resolution\n",
     "                p2 = gen[i].binY // resolution\n",
     "                val = gen[i].counts\n",
     "                A[p1, p2] += val\n",
     "                if p1 != p2:\n",
     "                    A[p2, p1] += val\n",
     "            A = A.astype(np.float32)\n",
     "            group_identity = cell_identity.create_group('{0}'.format(ch))\n",
     "            carn_divider(A, (cell_path_list[j].split(\"/\")[-1]).split(\".\")[0], ch, group_identity, args.chunk, args.stride, args.bound, args.padding)\n",
     "    H5File.close()\n",
     "return None\n",
     "\n",
     "def masking(args):\n",
     "    \"\"\"\n",
     "    Generate maksing matrics.\n",
     "    \"\"\"\n",
     "    masking_ratio = args.masking_ratio\n",
     "    save_path = args.outdir+'/h5_hic_dataset.hdf5'\n",
     "    H5File = h5py.File(save_path, 'r+')\n",
     "    im = []\n",
     "    def get_data_items(name, obj):\n",
     "        if len(name.split('/')) == 3:\n",
     "            if name.split('/')[2] == 'img':\n",
     "                if int((name.split('/')[1]).split('_')[0])>= int((name.split('/')[1]).split('_')[1]):\n",
     "                    im.append('/'.join(name.split('/')[:2]))\n",
     "\n",
     "   for key in H5Dataset.keys():\n",
     "        key_sample = key\n",
     "        break\n",
     "\n",
     "    H5Dataset[key_sample].visititems(get_data_items)\n",
     "\n",
     "    images = []\n",
     "    cell_images = []\n",
     "    for key in H5File.keys():\n",
     "        cell_images.append(key)\n",
     "        for i_m in im:\n",
     "            cell_im = '/'.join([key, i_m])\n",
     "            images.append(cell_im)\n",
     "\n",
     "    np.random.seed(0)\n",
     "    for key in tqdm(images):\n",
     "        if eval(H5File[key]['label'][3]) == eval(H5File[key]['label'][4]):\n",
     "            mask = np.where(np.tril(H5File[key]['img'][:].reshape(200, 200)) <= 0, 0, 1)\n",
     "            mask_tril = mask[np.tril_indices_from(mask)]\n",
     "            num_patches = np.sum(mask_tril == 0)\n",
     "            num_mask = int((1-masking_ratio) * num_patches)\n",
     "            mask_ind = np.hstack([np.zeros(num_patches - num_mask), np.ones(num_mask)])\n",
     "            np.random.shuffle(mask_ind)\n",
     "            mask_tril[mask_tril == 0] = mask_ind\n",
     "            mask[np.tril_indices_from(mask)] = mask_tril\n",
     "            mask = mask + mask.T -np.diag(np.diag(mask))\n",
     "            H5File[key].create_dataset('mask', data = mask.reshape(200*200), compression=\"gzip\")\n",
     "        else:\n",
     "            mask = np.where(H5File[key]['img'][:] <= 0, 0, 1)\n",
     "            num_patches = np.sum(mask == 0)\n",
     "            num_mask = int((1-masking_ratio) * num_patches)\n",
     "            mask_ind = np.hstack([np.zeros(num_patches - num_mask), np.ones(num_mask)])\n",
     "            np.random.shuffle(mask_ind)\n",
     "            mask[mask == 0] = mask_ind\n",
     "            H5File[key].create_dataset('mask', data = mask, compression=\"gzip\")\n",
     "    H5File.close()\n",
     "return None\n",
     "\n",
     "if __name__ == \"__main__\":\n",
     "    # parse command line arguments\n",
     "    parser = argparse.ArgumentParser()\n",
     "    parser.add_argument(\n",
     "        \"--indir\", type=str, required=True,\n",
     "        help=\"root directory where high resolution intrachromosomal Hi-C interaction .hic profile are stored\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        '--output', type=str, required=True,\n",
     "            help=\"output directory to write preprocessing results to\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--chr_list\", default=['1','2','3','4','5','6','7','8','9','10',\n",
     "        '11','12','13','14','15','16','17','18','19'], type=str, nargs='+', help=\"chromosomes list to analyse\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--resolution\", type=int, default=10000, help=\"single cell Hi-C resolution\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--chunk\", type=int, default=200, help=\"chunk size to split scHi-C\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--stride\", type=int, default=200, help=\"stride size to split scHi-C\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--bound\", type=int, default=201, help=\"bound size to split scHi-C\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--padding\", action=\"store_true\", default=True, help=\"whether padding when dividing scHi-C\"\n",
     "    )\n",
     "    parser.add_argument(\n",
     "        \"--masking_ratio\", type=float, default=0.6, help=\"masking ratio\"\n",
     "    )\n",
     "    args = parser.parse_args()\n",
     "\n",
     "    processor(args)\n",
     "    masking(args)"
    ],
    "metadata": {
     "collapsed": false
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}